from aiogram import Bot, Dispatcher
from aiogram.types import (Message, CallbackQuery,
                            InlineKeyboardButton, InlineKeyboardMarkup,
                            InputMediaAudio, InputMediaDocument,
                            InputMediaPhoto, InputMediaVideo)
from aiogram.filters import CommandStart, Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

import configparser

# —Ç–æ–∫–µ–Ω
config = configparser.ConfigParser()
config.read('.ini')
API_TOKEN: str = config['AAGaribyanBot']['BOT_TOKEN']

# —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher()


LEXICON: dict[str, str] = {
    'audio': 'üé∂ –ê—É–¥–∏–æ',
    'text': 'üìÉ –¢–µ–∫—Å—Ç',
    'photo': 'üñº –§–æ—Ç–æ',
    'video': 'üé¨ –í–∏–¥–µ–æ',
    'document': 'üìë –î–æ–∫—É–º–µ–Ω—Ç',
    'voice': 'üì¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    'text_1': '–≠—Ç–æ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–æ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –º–µ–¥–∏–∞.',
    'text_2': '–≠—Ç–æ —Ç–æ–∂–µ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.',
    'photo_id1': '-//-',
    'photo_id2': '-//-',
    'voice_id1': '-//-',
    'voice_id2': '-//-',
    'audio_id1': '-//-',
    'audio_id2': '-//-',
    'document_id1': '-//-',
    'document_id2': '-//-',
    'video_id1': '-//-',
    'video_id2': '-//-'
}


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
def get_markup(width: int, *args, **kwargs) -> InlineKeyboardMarkup:
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–ª–¥–µ—Ä–∞
    kb_builder: InlineKeyboardBuilder = InlineKeyboardBuilder()
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons: list[InlineKeyboardButton] = []

    # –∑–∞–ø–æ–ª–µ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))

    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(
                text=text,
                callback_data=button))

    # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)

    # –≤–æ–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


# —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/start'
@dp.message(CommandStart)
async def process_start_command(message: Message):
    markup = get_markup(2, 'photo')
    await message.answer(text=LEXICON['photo_id1'],
                         reply_markup=markup)


# —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–¥–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(Text(text=['audio','video','document','photo']))
async def process_button_press(callback: CallbackQuery):
    markup = get_markup(2, 'photo')
    try:
        await bot.edit_message_media(chat_id=callback.message.chat.id,
                                     message_id=callback.message.message_id,
                                     media=InputMediaPhoto(media=LEXICON['photo_id2'],
                                                           caption='–≠—Ç–æ —Ñ–æ—Ç–æ 2'),
                                     reply_markup=markup)
    except TelegramBadRequest:
        await bot.edit_message_media(chat_id=callback.message.chat.id,
                                     message_id=callback.message.message_id,
                                     media=InputMediaPhoto(media=LEXICON['photo_id1'],
                                                           caption='–≠—Ç–æ —Ñ–æ—Ç–æ 1'),
                                     reply_markup=markup)



# —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def send_echo(message: Message):
    print(message)
    await message.answer(text='–ù–µ –ø–æ–Ω–∏–º–∞—é')
